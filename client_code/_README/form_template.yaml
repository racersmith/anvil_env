components:
- layout_properties: {grid_position: 'UKMGAF,QCFVGQ'}
  name: image_1
  properties: {source: _/theme/env_var.png}
  type: Image
- layout_properties: {grid_position: 'LMPYRN,RWDOGY'}
  name: readme
  properties:
    content: "# ENV\nENV is a flexible environment variable handler that is designed to be compatible with dependency apps.\n\n## Basic Usage\nYou can use ENV as a way to give flexibility to configuration variable without having to chase down where they live in the code base.\n```\nfrom ENV import environ\n\nmy_variable = environ.get('MY_VARIABLE', defalut=1234)\nprint(my_variable)\n>> 1234\n```\nThis can be done without any setup other than adding ENV as a dependency.  However, by adding this type of default get to your code you can then ask about what variables are being used in the codebase from the sever console by running:\n```\nfrom ENV import environ\nenviron.VARIABLES\n```\n\n```\nEnvironment Variables\nin_use:\n\tNo variables in use.\navailable:\n\tMY_VARIABLE\n```\n\nWe can see that `my_variable` is available to override and that we currently do not have any variables in use.\n\n## Setup\nTo setup the ability to override environment variables we need to create a table.\n\nCreate a table called `env` with columns:\n* `key` of type `str`\n* `value` of type `simple object`\n* `info` of type `str`\n\nYou can check the setup status in the server console by running:\n```\nenviron.DB\n```\nWhere you should see:\n```\nENV Table Status: Ready\n\t'env' table created\n\tkey, value, info columns found\n```\nor information on what setup still needs to happen.\n\n## Full Usage\nAfter a table is setup in the parent app we get expanded functionality.\n\n### Overriding default values\nThe default values of can be overridden by adding a record in the `env` table.  For instance, to override the `MY_VARIABLE` from earlier we can add the record:\n\n\n`key=MY_VARIABLE, value=9876, info=this is just a test variable to demonstrate ENV usage`\n\n\nTo the `env` table.\n\nAfterwards, when we run the same code block:\n```\nfrom ENV import environ\nmy_variable = environ.get('MY_VARIABLE', defalut=1234)\nprint(my_variable)\n>> 9876\n```\nWe get the overridden value from the table rather than the default.\n\n### Forced Variables\nWe can force values to be used in the `env` table by no providing any default value when using `get`.  If the value is not setup within the `env` table we will get a `LookupError`.\n\n```\nfrom ENV import environ\nurl = environ.get('APP_URL')\n>> LookupError: environment variable: 'APP_URL' not found\n```\n\nAfter adding the record to the table:\n```\nurl = environ.get('APP_URL')\nprint(url)\nexample.com\n```\n\n## Variable Tracking\nVariables are automatically tracked throughout the code whenever their value is set or retrieved.  This can be helpful for understanding what is available and in use without having to dig through dependency apps or find configuration variables.  This can be done from the server console:\n```\nfrom ENV import environ\nenviron.VARIABLES\n```\n```\nenviron.VARIABLES\nEnvironment Variables\nin_use:\n\tAPP_URL\navailable:\n\tMY_VARIABLE\n```\n\nYou can also query the names directly:\n```\nenviron.VARIABLES.in_use\nenviron.VARIABLES.available\nenviron.VARIABLES.all\n```\n\n### Tracking\nTracking is done whenever the value is set or retrieved.  So variables can only be tracked if the code has been executed.\n\nmy_module\n```\nfrom ENV import environ\n\napp_url = environ.get('APP_URL')\nif False:\n    my_var = environ.get('MY_VARIABLE', 1234)\n```\nnow from the console:\n```\nfrom ENV import environ\nenviron.VARIABLES\n```\n```\nenviron.VARIABLES\nEnvironment Variables\nin_use:\n\tAPP_URL\navailable:\n\t\tNo variables available\n```\nYou will get no mention of `MY_VARIABLE` because the code was not executed.  You could use this as a feature by selectively getting variables or misuse it to make this look like a bug.  The choice is yours."
  type: RichText
container: {type: ColumnPanel}
is_package: true
